pipeline {
    /* ---------- Where the build runs ---------- */
    agent any   // use any available agent (or set a specific label)

    /* ---------- Param to control auto-apply ---------- */
    parameters {
        booleanParam(
            name: 'APPLY_CHANGES',
            defaultValue: false,
            description: 'If true, run terraform apply after a successful plan'
        )
    }

    /* ---------- (Optional) AWS creds pulled from Jenkins store ---------- */
    environment {
        // Uncomment if you created credentials IDs called these
        // AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        // AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION = 'eu-west-1'
    }

    /* ---------- Build stages ---------- */
    stages {
        stage('Checkout') {
            steps {
                /* simplest, built-in git step */
                git branch: 'main',
                    url: 'https://github.com/Chinwezekosiso/jenkins-s3-terraform.git'
            }
        }

        stage('Terraform Init') {
            steps {
                sh 'terraform init -input=false'
            }
        }

        stage('Plan Terraform') {
            steps {
                script {
                    /* Capture plan exit code (0 = no change, 2 = changes, >2 = error) */
                    int planResult = sh(
                        script: 'terraform plan -detailed-exitcode -out=tfplan',
                        returnStatus: true
                    )

                    if (planResult == 0) {
                        echo '✓ Infrastructure is already up-to-date (exit 0).'
                    } else if (planResult == 2) {
                        echo '⚠️  Changes detected (exit 2).'
                    } else {
                        error "Terraform plan failed with exit code ${planResult}"
                    }
                }
            }
        }

        stage('Apply Terraform') {
            when { expression { params.APPLY_CHANGES } }
            steps  { sh 'terraform apply -auto-approve tfplan' }
        }
    }

    /* ---------- Post-build housekeeping ---------- */
    post {
        always {
            /* remove plan file if it exists but ignore error if it doesn't */
            sh 'rm -f tfplan || true'

        }
    }